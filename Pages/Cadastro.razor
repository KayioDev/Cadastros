@page "/"
@page "/cadastro    "
@inject IBGEService IBGEService
@inject CidadeService CidadeService
@inject HttpClient Http
@inject AppDbContext DB


<div class="img_back">
</div>
<EditForm Model="Usuario" OnValidSubmit="SalvarUsuario">
    <DataAnnotationsValidator />
    <div class="container mb-4">
        <h1 class="mb-4 ">Cadastro de Endereço:</h1>
        <h3 class="mb-4 ">Dados pesssoais:</h3>
    <div class="input_info">
        <div class="row g-3 grid gap-3">
            <div class="col-md-4">
                <div class="form-floating">
                    <input class="form-control" id="floatingInputGrid" @bind="Usuario.Nome" /> 
                    <label for="floatingInputGrid">Nome:</label>
                   <ValidationMessage For="@(() => Usuario.Nome)" />
                </div>
            </div>      
             <div class="col-md-4">
                <div class="form-floating">
                    <input type="email" class="form-control" id="floatingInputGrid" @bind="Usuario.Email" />
                    <label for="floatingInputGrid">Email:</label>
                    <ValidationMessage For="@(() => Usuario.Email)" />
                </div>
            </div>
        </div>
    </div>
    </div>
    <div class="container">     
    <h3 class="mb-4">Endereço:</h3>
    <div class="row g-2 grid gap-3 ">
        <div class="col-md">
            <div class="form-floating">
                 <select class="form-select" @onchange="BuscarCidade" >
                <ValidationMessage For="(()=> Usuario.Estado)"></ValidationMessage> 
                 <option value="">Selecione um estado</option>
                 @if(estados is not null) 
                    {   
                    @foreach(var uf in estados)
                    {
                        <option value="@uf.Sigla">@uf.Sigla</option>
                    }
                    }else 
                    {
                        <option value="">Carregando estados...</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md">
            <div class="form-floating">
                <select class="form-select" @onchange="OnChangeCidade">
                <ValidationMessage For="(()=> Usuario.Cidade)"></ValidationMessage>
                <option  value="">Selecione uma cidade</option>
                    @if(cidades is not null)
                    {
                        @foreach (var cidade in cidades)
                        {
                            <option value="@cidade.Nome">@cidade.Nome</option>
                        }
                    }
                </select>
            </div> 
        </div>
        <div class="col-md-4">
                <div class="form-floating">
                    <input class="form-control" id="floatingInputGrid" @bind="Usuario.Logradouro" />
                    <ValidationMessage For="@( () => Usuario.Logradouro)"></ValidationMessage>
                    <label for="floatingInputGrid">Logradouro:</label>
                </div>
            </div>
        <div class="btn_save">
            <button type="submit" class=" btn btn-primary ">Salvar usuario</button>
        </div>
    </div>
    
    </div>
<Alert Mensagem="@Mensagem" TipoAlerta="@TipoAlerta"></Alert>
</EditForm>
@code {
    private List<Estado>? estados;
    private List<Cidade>? cidades;
    private Usuario Usuario = new();
    private string? Mensagem = "";
    private string TipoAlerta = "primary";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            estados = await IBGEService.ObterEstados();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar estados: {ex.Message}");
            estados = new List<Estado>(); 
        }
    }

    private async Task BuscarCidade (ChangeEventArgs args) 
    {
       var estadoSelecionado = args.Value?.ToString() ?? "";

       if(estadoSelecionado != null)
       {
        cidades = await CidadeService.ObterCidadesPorEstado(estadoSelecionado);
        Usuario.Estado = estadoSelecionado;
       }
         else
        {
            cidades = new List<Cidade>();
        }
    }

   private async Task SalvarUsuario()
    {
        try
        {
            DB.Usuarios.Add(Usuario);
            await DB.SaveChangesAsync();

            Mensagem = "Usuário salvo com sucesso!";
            TipoAlerta = "success";

            Usuario = new Usuario ();

            StateHasChanged();
            
            await Task.Delay(3000);
            Mensagem = null;
        }catch (Exception ex) 
        {
            
            Mensagem = $"Erro ao salvar usuário: {ex.Message}";
            TipoAlerta = "danger";

            StateHasChanged();
            await Task.Delay(5000);
            Mensagem = null;
        }
  
    }
    

    private void OnChangeCidade (ChangeEventArgs args) 
    {
      var cidadeSelecionada = args.Value?.ToString() ?? "";
      Usuario.Cidade = cidadeSelecionada;
      Console.WriteLine(Usuario.Nome);
    }
}


@page "/cadastros"
<PageTitle>Cadastros</PageTitle>
@inject HttpClient Http;
@inject AppDbContext Db;
@using Microsoft.EntityFrameworkCore;

<Alert Mensagem="@Mensagem" TipoAlerta="@TipoAlerta"></Alert>
<h3 style=" font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif; color: black;">Buscar usuario</h3>
<form class="row row-cols-lg-auto g-3 align-items-center">
  <div class="col-12">
    <select class="form-select" @bind="usuarioGuidId">
      <option value="" >Selecione um usuário</option>
      @if (usuarios is not null)
      {
        @foreach (var user in usuarios)
        {
          <option value="@user.Id">@user.Nome</option>
        }
      }
    </select>
  </div>
  <div class="col-12">
    <button type="button" class="btn btn-primary" @onclick="MostrarDados">Mostrar dados</button>
  </div>
   <div class="col-12">
    <button type="button" class="btn btn-primary" @onclick="ApagarUsuario">Apagar Usuário</button>
  </div>
</form>


<CadastroDeUsuarios.Components.ModalInfo  Mostrar="@MostrarDados" Fechar="FecharModal" Editar="EditarDados" novoUsuario="@novoUsuario"  mostrarModal="@mostrarModal" ></CadastroDeUsuarios.Components.ModalInfo>
<CadastroDeUsuarios.Components.ModalEdit  modalEdit="@modalEdit" novoUsuario="@novoUsuario" Fechar="FecharModal" Salvar="SalvarEdicao" ></CadastroDeUsuarios.Components.ModalEdit>



@code {
    private List<Usuario> usuarios = new();
    private Guid usuarioGuidId ;
    private Usuario? novoUsuario ;

    private string? Mensagem = "";
    private string? TipoAlerta = "";
    private bool mostrarModal = false;

    private bool modalEdit = false;


    protected override async Task OnInitializedAsync()
    {
          usuarios = await Db.Usuarios.ToListAsync();
          usuarios.Sort((a,b)=> string.Compare(a.Nome, b.Nome, StringComparison.OrdinalIgnoreCase));
    }


     private void MostrarDados()
    {
   
        if (usuarioGuidId != Guid.Empty)
        {
            novoUsuario = usuarios.FirstOrDefault(user => user.Id == usuarioGuidId);
            mostrarModal = true;
        }
    }

     private async Task ApagarUsuario () 
     {
      if(usuarioGuidId != Guid.Empty)
      {
        var usuarioSelecionado = await Db.Usuarios.FindAsync(usuarioGuidId);
        if( usuarioSelecionado != null)
        {
          Db.Usuarios.Remove(usuarioSelecionado);
          await Db.SaveChangesAsync();

          await CarregarUsuarios();
        
          Mensagem = "Usuario apagado com sucesso";
          TipoAlerta = "success";
          usuarioGuidId = Guid.Empty;
          
         StateHasChanged();
        }
      }
     }
    private void EditarDados () 
    {
      modalEdit = true;
      mostrarModal = false;
    }
    private void FecharModal()
    {
         mostrarModal = false;
         modalEdit = false;
    }

     private async Task SalvarEdicao()
    {
        if (novoUsuario != null)
        {
         Db.Usuarios.Update(novoUsuario);
         await Db.SaveChangesAsync();

        Mensagem = "Usuário editado com sucesso!";
        TipoAlerta = "success";
        modalEdit = false;
        StateHasChanged();
        await Task.Delay(3000);
        Mensagem = null;        
        }
    } 
    private async Task CarregarUsuarios()
{
    usuarios = await Db.Usuarios.ToListAsync();
}

}

